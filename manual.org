#+startup: nofold

* geo
  ~geo~ is an Emacs Lisp library for retrieving live location data.
  It is extensible and allows for multiple backends.  To create backends,
  please view [[Creating Backends]].

  The primary endpoint for interfacing with ~geo~ is the Lisp variable
  ~geo-xdg-changed-hook~, which accepts functions accepting a single
  location argument.  The location objects are alists guaranteed to
  have 3 fields:
    - ~lat~ :: The latitude of the location.
    - ~lon~ :: The longitude of the location.
    - ~dt~ :: The time the location was recorded, in epoch seconds.

  There are also several optional fields that may or may not exist in locations:
    - ~accuracy~ ::
      The distance (in metres) around the location the actual location is within 
      at a 95% confidence.
    - ~speed~ :: The speed at which the device is currently traveling, in metres/second.
    - ~alt~ :: The altitude of the device or location in metres.

  Several convenience functions are provided for retrieving location fields:
    - ~geo-location-lat~ :: Returns the latitude of the location
    - ~geo-location-lon~ :: Returns the longitude of the location

  To retrieve the last known position, you may also use the function
  ~geo-last-location~.

** Creating Backends
   geo backends are primarily created via the function ~geo-enable-backend~,
   which accepts 3 arguments:
    - ~subscribe-function~ ::
      This should be a procedure accepting one argument, which is another
      function that should be called with the current location whenever
      it is changed, or the backend is created.
    - ~outdated-p-function~ ::
      This should be a procedure accepting zero arguments, that returns
      a non-nil value if the backend should be considered as containing
      potentially outdated data.
    - ~priority~ ::
      This should be a integer.  The higher the integer is, the more priority
      the backend will get.


* geo-xdg
  ~geo-xdg~ is an Emacs Lisp library for interfacing with the XDG
  GeoClue geolocation API.  There are 2 entry-points for using the API:
   - ~geo-xdg-last-location~ ::
     This variable stores the last recieved location, in a format
     described inside [[Location Format]].  It may be nil if no location
     exists.
   - ~geo-xdg-changed-hooks~ ::
     This hook stores a list of functions that accept a single argument
     ~LOCATION~, which should be the new location.  The functions are
     called whenever the current location is changed.

  geo-xdg is also a backend for the ~geo~ geolocation library.
  To use it with geo, append the following to your initialization files:
#+begin_src elisp
(require 'geo)
(require 'geo-xdg)
#+end_src

  To use geo-xdg, Emacs must be built with Dbus support.
** Location Format
   Locations in geo-xdg are guaranteed to be an alist, with the following elements:
    - ~lat~ :: The latitude of this location.  Always non-nil.
    - ~lon~ :: The longitude of this location.  Always non-nil.
    - ~alt~ :: The altitude of this location in metres.  May be nil.
    - ~speed~ :: The speed the device is traveling at.  May be nil.
    - ~description~ :: A short description of this location.  May be nil.

   There are several convenience functions that can be used to access location data:
    - ~geo-xdg-location-lat-long~ ::
      Return the latitude and longitude of the single
      argument as a cons pair.
    - ~geo-xdg-lat~ :: Return the latitude of the single argument.
    - ~geo-xdg-lon~ :: Return the longitude of the single argument.
    - ~geo-xdg-alt~ ::
      Return the altitude of the single argument, or nil if it does not exist.
** User Customization
   Certain aspects of geo-xdg can be customized by users via the following
   variables:

    - ~geo-xdg-cache-function~ ::
      A function that should return a cached location, or nil if none exists.
      The default value is ~geo-xdg-get-cache~.
    - ~geo-xdg-save-cache-function~ ::
      A function that accepts a single location value,
      which should be saved into the cache.

** User commands
   geo-xdg provides several commands that can be used to change geo-xdg behaviour:
    - ~geo-xdg-pause~ :: Stop receiving location updates
    - ~geo-xdg-resume~ :: Resume recieving location updates
    - ~geo-xdg-focus-changed~ ::
      A convenience function that disables or enables
      location updates, depending on whether Emacs has input focus.

      It should be attached to ~after-focus-change-function~.
      To use the function, append the following code to your init files:
#+begin_src elisp
(if (version<= "27" emacs-version)
    (add-function :after after-focus-change-function #'geo-xdg-focus-changed)
  (add-hook 'focus-in-hook #'geo-xdg-resume) ;; We don't have `after-focus-change-function'
  (add-hook 'focus-out-hook #'geo-xdg-pause))
#+end_src

* geo-xdg-solar
  ~geo-xdg-solar~ is deprecated, and now requires ~geo-solar~.

* geo-solar
  ~geo-solar~ is a package that sets ~calendar-longitude~ and ~calendar-latitude~
  according to the current location set inside ~geo.el~.  To use ~geo-solar~, add
  the following code to your initialization files:
#+begin_src elisp
(require 'geo-solar)
#+end_src

* geo-ip
  ~geo-ip~ is an IP geolocation provider for ~geo.el~.  To use geo-ip, place
  the following code in your initialization files:
#+begin_src elisp
(require 'geo-ip)
#+end_src

** User customization
   geo-ip can be customized via the following variables:
     - ~geo-ip-urls~ ::
       A list of URLs to be used for fetching the geolocation. The URLs should take no
       arguments, and return a json object with the fields "longitude" and "latitude",
       which should be doubles.

       A cons pair of the aformentioned URLs and a quoted extractor function, accepting
       a single json.el object, and returning the latitude and longitude as a cons pair
       is also accepted.

* geo-fallback
  ~geo-fallback~ is a fallback geo.el backend location provider, which always provides
  a fixed location to geo.el.

  To customize the location stored inside ~geo-fallback~, set the variables
  ~geo-fallback-lat~, ~geo-fallback-lon~.

* geo-nm
  ~geo-nm~ is a geo.el backend that uses the XDG NetworkManager API
  and the Mozilla Location Service to provide Wi-Fi AP based network
  geolocation to geo.el.

  It can also be used as an independent library, though it will still
  depend on geo.el.  You are recommended to use that instead.

** Use as a geo.el backend
   To use geo-nm as a geo.el backend, simply put:
#+begin_src elisp
(require 'geo-nm)
#+end_src
   In your initialization files.

** Use as an independent library
   The primary entry point for using geo-nm is the hook ~geo-nm-changed-hook~,
   which accepts a single argument containing a geo.el location.

   You can also use the ~geo-nm-last-result~ variable, which contains
   the last retrieved location, or nil if none exists.

** User customization
   geo-nm can be customized via the following variables:
    - ~geo-nm-moz-key~ ::
      You can customize the ~geo-nm-moz-key~ variable to set the MLS API key.
      It defaults to the string ~geoclue~.
    - ~geo-nm-delay~ :: The minimum amount of time between refreshes.
